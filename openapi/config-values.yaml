# Copyright 2025 Flant JSC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

type: object
description: |
  Пользовательские параметры модуля GPU Control Plane. Набор опций повторяет практику
  Deckhouse: минимум крутилок, только ключевые сценарии включения и управления GPU.
properties:
  highAvailability:
    type: boolean
    description: |
      Явное включение высокодоступного режима для контроллеров модуля.

      При значении `true` модуль всегда запускает по две реплики контроллера и вебхука,
      независимо от топологии control plane. При значении `false` HA отключается.
      Если параметр не задан, используется автодетекция Deckhouse.
    x-examples: [true, false]
  managedNodes:
    type: object
    description: |
      Управление охватом узлов: какую метку использовать и включено ли обслуживание по умолчанию.
    properties:
      labelKey:
        type: string
        default: "gpu.deckhouse.io/enabled"
        description: |
          Ключ метки на узлах. Пока значение метки не равно строке `false`, модуль считает узел
          управляемым и ведёт учёт GPU.
        x-examples: ["gpu.deckhouse.io/enabled"]
      enabledByDefault:
        type: boolean
        default: true
        description: |
          Если `true`, узлы считаются управляемыми до тех пор, пока администратор явно не
          установит метку `labelKey=false`.
        x-examples: [true, false]
    additionalProperties: false
  deviceApproval:
    type: object
    description: |
      Политика подтверждения новых GPU-устройств. Можно оставить ручной режим, включить
      автоматический аппрув или ограничить его селектором.
    properties:
      mode:
        type: string
        default: "Manual"
        description: |
          Режим подтверждения:
            * `Manual` — контроллер переводит устройства в состояние ожидания, решения принимает оператор;
            * `Automatic` — устройства подтверждаются сразу после обнаружения;
            * `Selector` — автоаппрув выполняется только для устройств, подходящих под селектор.
        enum:
          - Manual
          - Automatic
          - Selector
        x-examples: ["Manual", "Automatic", "Selector"]
      selector:
        type: object
        description: |
          Селектор меток устройства, используемый при режиме `Selector`. Формат полностью
          повторяет Kubernetes LabelSelector.
        properties:
          matchLabels:
            type: object
            description: |
              Точное соответствие меткам `ключ=значение`, обязательным на устройстве.
            additionalProperties:
              type: string
          matchExpressions:
            type: array
            description: |
              Набор выражений, описанных как в Kubernetes LabelSelector (`In`, `NotIn`,
              `Exists`, `DoesNotExist`).
            items:
              type: object
              description: Описание одного выражения селектора.
              properties:
                key:
                  type: string
                  description: Имя метки, по которой выполняется проверка.
                operator:
                  type: string
                  description: Оператор сравнения (`In`, `NotIn`, `Exists`, `DoesNotExist`).
                  enum:
                    - In
                    - NotIn
                    - Exists
                    - DoesNotExist
                values:
                  type: array
                  description: |
                    Набор значений метки. Обязателен для операторов `In` и `NotIn`, запрещён
                    для `Exists` и `DoesNotExist`.
                  items:
                    type: string
              additionalProperties: false
        additionalProperties: false
    additionalProperties: false
  scheduling:
    type: object
    description: |
      Базовые подсказки планировщику. Их наследуют новые GPUPool, если не переопределяют явно.
    properties:
      defaultStrategy:
        type: string
        default: "Spread"
        description: |
          Стратегия размещения по умолчанию: `Spread` распределяет нагрузку между зонами,
          `BinPack` собирает workload на меньшем числе узлов.
        enum:
          - BinPack
          - Spread
        x-examples: ["Spread", "BinPack"]
      topologyKey:
        type: string
        default: "topology.kubernetes.io/zone"
        description: |
          Ключ топологии Kubernetes, используемый при стратегии `Spread`.
        x-examples: ["topology.kubernetes.io/zone"]
    additionalProperties: false
  inventory:
    type: object
    description: |
      Настройки периодического опроса состояния узлов со стороны inventory-контроллера.
    properties:
      resyncPeriod:
        type: string
        pattern: '^\\d+(s|m|h)$'
        default: "30s"
        description: |
          Интервал повторной синхронизации при отсутствии событий. Указывается в формате
          Go duration (`30s`, `1m`, `5m` и т. д.).
        x-examples: ["30s", "1m", "5m"]
    additionalProperties: false
